var documenterSearchIndex = {"docs":
[{"location":"usage/examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"To use REopt Lite you will need to have a solver installed. REoptLite.jl has been tested with Xpress, Cbc, and CPLEX solvers, but it should work with other Linear Progam solvers (for PV and Storage scenarios) or Mixed Integer Linear Program solvers (for scenarios with outages and/or Generators).","category":"page"},{"location":"usage/examples/#Basic","page":"Examples","title":"Basic","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"using Xpress\nusing JuMP\nusing REoptLite\n\nm = Model(Xpress.Optimizer)\nresults = run_reopt(m, \"path/to/scenario.json\")","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"The results is a Dict.","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"For more on the scenario.json see the Inputs section.","category":"page"},{"location":"methods/#Methods","page":"Methods","title":"Methods","text":"","category":"section"},{"location":"methods/","page":"Methods","title":"Methods","text":"run_reopt\nbuild_reopt!(m::JuMP.AbstractModel, fp::String)\nScenario(d::Dict)","category":"page"},{"location":"methods/#REoptLite.run_reopt","page":"Methods","title":"REoptLite.run_reopt","text":"run_reopt(m::JuMP.AbstractModel, fp::String)\n\nSolve the model using the Scenario defined in JSON file stored at the file path fp.\n\n\n\n\n\nrun_reopt(m::JuMP.AbstractModel, d::Dict)\n\nSolve the model using the Scenario defined in dict d.\n\n\n\n\n\n","category":"function"},{"location":"methods/#REoptLite.build_reopt!-Tuple{AbstractModel,String}","page":"Methods","title":"REoptLite.build_reopt!","text":"build_reopt!(m::JuMP.AbstractModel, fp::String)\n\nAdd variables and constraints for REopt model.  fp is used to load in JSON file to construct REoptInputs.\n\n\n\n\n\n","category":"method"},{"location":"methods/#REoptLite.Scenario-Tuple{Dict}","page":"Methods","title":"REoptLite.Scenario","text":"Scenario(d::Dict)\n\nConstructor for Scenario struct, where d has upper-case keys:\n\nSite (required)\nElectricTariff (required)\nElectricLoad (required)\nPV (optional, can be Array)\nStorage (optional)\nElectricUtility (optional)\nFinancial (optional)\nGenerator (optional)\n\nAll values of d are expected to Dicts except for PV, which can be either a Dict or Dict[].\n\nstruct Scenario\n    site::Site\n    pvs::Array{PV, 1}\n    storage::Storage\n    electric_tariff::ElectricTariff\n    electric_load::ElectricLoad\n    electric_utility::ElectricUtility\n    financial::Financial\n    generator::Generator\nend\n\n\n\n\n\n","category":"method"},{"location":"#REoptLite.jl","page":"Home","title":"REoptLite.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Renewable Energy Optimization and Integration","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is currently under development and not necessarily stable. It contains a subset of the REopt Lite API capabilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Depth = 3","category":"page"},{"location":"usage/inputs/#Inputs","page":"Inputs","title":"Inputs","text":"","category":"section"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"Inputs to run_reopt can be provided in one of three format:","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"a file path (string) to a JSON file,\na Dict, or\nusing the REoptInputs struct","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"The first option is perhaps the most straightforward one. For example, the minimum requirements for a JSON scenario file would look like:","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"{\n    \"Site\": {\n        \"longitude\": -118.1164613,\n        \"latitude\": 34.5794343\n    },\n    \"ElectricLoad\": {\n        \"doe_reference_name\": \"MidriseApartment\",\n        \"annual_kwh\": 1000000.0,\n        \"city\": \"Boulder\"\n    },\n    \"ElectricTariff\": {\n        \"urdb_label\": \"5ed6c1a15457a3367add15ae\"\n    }\n}","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"The order of the keys do not matter. Note that this scenario does not include any energy generation technologies and therefore the results can be used as a baseline for comparison to scenarios that result in cost-optimal generation technologies.","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"To add PV to the analysis simply add a PV key with an empty dictionary (to use default values):","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"{\n    \"Site\": {\n        \"longitude\": -118.1164613,\n        \"latitude\": 34.5794343\n    },\n    \"ElectricLoad\": {\n        \"doe_reference_name\": \"MidriseApartment\",\n        \"annual_kwh\": 1000000.0,\n        \"city\": \"Boulder\"\n    },\n    \"ElectricTariff\": {\n        \"urdb_label\": \"5ed6c1a15457a3367add15ae\"\n    },\n    \"PV\": {}\n}","category":"page"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"This scenario will consider the option to purchase a solar PV system to reduce energy costs, and if solar PV can reduce the energy costs then REopt Lite will provide the optimal PV capacity (assuming perfect foresight!). To use other than default values for PV see the PV struct definition.  For example, the site under consideration might have some existing PV capacity to account for, which can be done by setting the existing_kw key to the appropriate value.","category":"page"},{"location":"usage/inputs/#ElectricLoad","page":"Inputs","title":"ElectricLoad","text":"","category":"section"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"ElectricLoad","category":"page"},{"location":"usage/inputs/#REoptLite.ElectricLoad","page":"Inputs","title":"REoptLite.ElectricLoad","text":"ElectricLoad(;\n    loads_kw::Union{Missing, Array{<:Real,1}} = missing,\n    year::Int = 2020,\n    doe_reference_name::Union{Missing, String} = missing,\n    city::Union{Missing, String} = missing,\n    annual_kwh::Union{Real, Nothing} = nothing,\n    monthly_totals_kwh::Array{<:Real,1} = Real[],\n    critical_loads_kw::Union{Missing, Array{Real,1}} = missing,\n    loads_kw_is_net::Bool = true,\n    critical_loads_kw_is_net::Bool = false,\n    critical_load_pct::Real = 0.5\n)\n\nMust provide either loads_kw or [doe_reference_name and city]. When using the  [doe_reference_name and city] option, choose city from one of the  cities used to represent the ASHRAE climate zones:\n\nAlbuquerque\nAtlanta\nBaltimore\nBoulder\nChicago\nDuluth\nFairbanks\nHelena\nHouston\nLosAngeles\nMiami\nMinneapolis\nPhoenix\nSanFrancisco\nSeattle\n\nand doe_reference_name from:\n\nFastFoodRest\nFullServiceRest\nHospital\nLargeHotel\nLargeOffice\nMediumOffice\nMidriseApartment\nOutpatient\nPrimarySchool\nRetailStore\nSecondarySchool\nSmallHotel\nSmallOffice\nStripMall\nSupermarket\nWarehouse\nFlatLoad\n\nEach city and doe_reference_name combination has a default annual_kwh, or you can provide your own annual_kwh or monthly_totals_kwh and the reference profile will be scaled appropriately.\n\n\n\n\n\n","category":"type"},{"location":"usage/inputs/#Financial-values","page":"Inputs","title":"Financial values","text":"","category":"section"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"Financial","category":"page"},{"location":"usage/inputs/#REoptLite.Financial","page":"Inputs","title":"REoptLite.Financial","text":"Financial\n\nBase.@kwdef struct Financial\n    om_cost_escalation_pct::Float64 = 0.025\n    elec_cost_escalation_pct::Float64 = 0.023\n    offtaker_tax_pct::Float64 = 0.26\n    offtaker_discount_pct = 0.083\n    two_party_ownership::Bool = false\n    owner_tax_pct::Float64 = 0.26\n    owner_discount_pct::Float64 = 0.083\n    analysis_years::Int = 25\n    macrs_five_year::Array{Float64,1} = [0.2, 0.32, 0.192, 0.1152, 0.1152, 0.0576]  # IRS pub 946\n    macrs_seven_year::Array{Float64,1} = [0.1429, 0.2449, 0.1749, 0.1249, 0.0893, 0.0892, 0.0893, 0.0446]\n    VoLL::Union{Array{R,1}, R} where R<:Real = 1.00\n    microgrid_premium_pct::Float64 = 0.3\nend\n\n\n\n\n\n","category":"type"},{"location":"usage/inputs/#ElectricUtility","page":"Inputs","title":"ElectricUtility","text":"","category":"section"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"ElectricUtility","category":"page"},{"location":"usage/inputs/#REoptLite.ElectricUtility","page":"Inputs","title":"REoptLite.ElectricUtility","text":"ElectricUtility\n\nBase.@kwdef struct ElectricUtility\n    outage_start_timestep::Int=0  # for modeling a single outage, with critical load spliced into the baseline load ...\n    outage_end_timestep::Int=0  # ... utiltity production_factor = 0 during the outage\n    # variables below used for minimax the expected outage cost,\n    # with max taken over outage start time, expectation taken over outage duration\n    outage_start_timesteps::Array{Int,1}=Int[]  # we minimize the maximum outage cost over outage start times\n    outage_durations::Array{Int,1}=Int[]  # one-to-one with outage_probabilities, outage_durations can be a random variable\n    outage_probabilities::Array{Real,1}=[1.0]\n    outage_timesteps::Union{Missing, UnitRange} = isempty(outage_durations) ? missing : 1:maximum(outage_durations)\n    scenarios::Union{Missing, UnitRange} = isempty(outage_durations) ? missing : 1:length(outage_durations)\nend\n\n\n\n\n\n","category":"type"},{"location":"usage/inputs/#Generator","page":"Inputs","title":"Generator","text":"","category":"section"},{"location":"usage/inputs/","page":"Inputs","title":"Inputs","text":"Generator","category":"page"},{"location":"usage/inputs/#REoptLite.Generator","page":"Inputs","title":"REoptLite.Generator","text":"Generator\n\nstruct with inner constructor:\n\nfunction Generator(;\n    existing_kw::Real=0,\n    min_kw::Real=0,\n    max_kw::Real=1.0e6,\n    cost_per_kw::Real=500.0,\n    om_cost_per_kw::Real=10.0,\n    om_cost_per_kwh::Float64=0.0,\n    fuel_cost_per_gallon::Float64 = 3.0,\n    fuel_slope_gal_per_kwh::Float64 = 0.076,\n    fuel_intercept_gal_per_hr::Float64 = 0.0,\n    fuel_avail_gal::Float64 = 660.0,\n    min_turn_down_pct::Float64 = 0.0,\n    only_runs_during_grid_outage::Bool = true,\n    sells_energy_back_to_grid::Bool = false\n)\n\nnote: Note\n\n\nNot using fuelcostpergallon b/c we assume that any existing fuel is a sunk cost, and currently the model only has existing fuel determined by fuelavail_gal.\n\n\n\n\n\n","category":"type"}]
}
